{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nLeft_Motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nRight_Motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      212 Path 1\n#\tAuthor:       Pablo Silva\n#\tCreated:      11/04/2024\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Registering variables to use in procedures. - Pablo\nBrainPrecision = 0\nConsolePrecision = 0\nFWD = Event()\nRT = Event()\nLT = Event()\n# Debug mode, enable by changing to True. - Pablo\ndebug = True\n# When Started event handler. - Pablo\ndef when_started_1():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    debug = True\n    FWD.broadcast_and_wait()\n    LT.broadcast_and_wait()\n    FWD.broadcast_and_wait()\n    RT.broadcast_and_wait()\n    FWD.broadcast_and_wait()\n# Motor 1 and 5 Forward event handlers, makes robot move around 9 inches. - Pablo\ndef event_Left_Motor_FWD():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    if debug = True:\n        brain.screen.next_row()\n        brain.screen.print('LEFT MOTOR - FORWARD')\n        wait(1, SECONDS)\n    else:\n        Left_Motor.spin_for(FORWARD, 412.7388527, DEGREES)\ndef event_Right_Motor_FWD():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    if debug = True:\n        brain.screen.next_row()\n        brain.screen.print('RIGHT MOTOR - FORWARD')\n        wait(1, SECONDS)\n    else:\n        Right_Motor.spin_for(FORWARD, 412.7388527, DEGREES)\n# Motor 1 and 5 Left event handlers, makes SVD turn around 90 degrees to the left. - Pablo\ndef event_Left_Motor_LT():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    if debug = True:\n        brain.screen.next_row()\n        brain.screen.print('LEFT MOTOR - LEFT')\n        wait(1, SECONDS)\n    else:\n        Left_Motor.spin_for(REVERSE, 200, DEGREES)\ndef event_Right_Motor_LT():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    if debug = True:\n        brain.screen.next_row()\n        brain.screen.print('RIGHT MOTOR - LEFT')\n        wait(1, SECONDS)\n    else:\n        Right_Motor.spin_for(FORWARD, 200, DEGREES)\n# Motor 1 and 5 Right event handlers, makes SVD turn around 90 degrees to the right. - Pablo\ndef event_Left_Motor_RT():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    if debug:\n        brain.screen.next_row()\n        brain.screen.print('LEFT MOTOR - RIGHT')\n        wait(1, SECONDS)\n    else:\n        Left_Motor.spin_for(FORWARD, 200, DEGREES)\ndef event_Right_Motor_RT():\n    global BrainPrecision, ConsolePrecision, FWD, RT, LT, debug\n    if debug:\n        brain.screen.next_row()\n        brain.screen.print('RIGHT MOTOR - RIGHT')\n        wait(1, SECONDS)\n    else:\n        Right_Motor.spin_for(REVERSE, 200, DEGREES)\n# Correlates the event handlers to a method. - Pablo\nFWD(event_Left_Motor_FWD)\nFWD(event_Right_Motor_FWD)\nLT(event_Left_Motor_LT)\nLT(event_Right_Motor_LT)\nRT(event_Left_Motor_RT)\nRT(event_Right_Motor_RT)\n# Initializes the code. - Pablo\nwhen_started_1()\n# 15 milisecond cooldown to make sure events register correctly. - Pablo\nwait(15, MSEC)","textLanguage":"python","robotConfig":[{"port":[1],"name":"Left_Motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"Right_Motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}